<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on SoByte</title>
    <link>https://www.sobyte.net/tags/docker/</link>
    <description>Recent content in docker on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Jul 2022 12:37:45 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker Compose Explained</title>
      <link>https://www.sobyte.net/post/2022-07/docker-compose/</link>
      <pubDate>Fri, 01 Jul 2022 12:37:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/docker-compose/</guid>
      <description>When we want to start a series of interdependent services at the same time, it is particularly tedious to start them one by one and in strict order. This is where we can use docker compose to perform this series of operations.
Compose Compose is a tool for defining and running multi-container Docker applications. With Compose you can use a YML file to configure all the services your application needs, and then create and start all the services from the YML file configuration with a single command.</description>
    </item>
    
    <item>
      <title>Encrypt and save the docker login password</title>
      <link>https://www.sobyte.net/post/2022-06/docker-credential/</link>
      <pubDate>Tue, 28 Jun 2022 13:30:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/docker-credential/</guid>
      <description>When using a image repository in an enterprise, you usually need to enable authentication, and the authentication credentials may be a common account for users in the enterprise. However, after docker login, the username and password after base64 will be saved in .docker/config.json, so that on some servers used by many people, there will be a problem of account leakage.
Is there a solution for this?
docker provides credentials store, which means that passwords are stored in an external credentials store.</description>
    </item>
    
    <item>
      <title>The Docker service mapped to 127.0.0.1 can be accessed directly from outside the host</title>
      <link>https://www.sobyte.net/post/2022-06/docker-secutiry/</link>
      <pubDate>Sat, 25 Jun 2022 13:13:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/docker-secutiry/</guid>
      <description>One of the postings on Hacker News that caught attention over the last couple of days was an email sent to the Docker security team that focused on a very outrageous security concern with Docker. Even if you expose the port to a loopback address with a parameter like -p 127.0.0.1:80:80, the service can still be accessed externally, what happened?
The reason for this is simple: Docker has added this Iptables rule.</description>
    </item>
    
    <item>
      <title>Use native Windows Docker containers</title>
      <link>https://www.sobyte.net/post/2022-06/windows-native-docker-container/</link>
      <pubDate>Wed, 15 Jun 2022 13:44:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/windows-native-docker-container/</guid>
      <description>When it comes to Docker containers, according to the usual thinking, that is Linux containers (LXC), not much to do with Windows, at best, is to run Docker containers in the Windows Linux virtual machine.
However, since Windows Server 2016, there are Windows-native Docker containers, which are no longer just for Linux, and Docker containers can now run Windows systems, with each Windows container sharing the host Windows kernel (&amp;ndash;isolation= process,) or use a Windows kernel in a highly optimized virtual machine (&amp;ndash;isolation=hyperv).</description>
    </item>
    
    <item>
      <title>Docker and iptables</title>
      <link>https://www.sobyte.net/post/2022-06/docker-iptables/</link>
      <pubDate>Thu, 09 Jun 2022 15:26:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/docker-iptables/</guid>
      <description>Requirements Docker Server Version: 20.10.12 On a server with Docker, I need to restrict external access using iptables as a firewall. Iptables &amp;amp;&amp;amp; Docker iptables is divided into three levels: tables, chains and rules. We generally only use the filter table, which contains. INPUT, input chain. Packets sent to this machine pass through this chain. OUTPUT, the output chain. Packets sent from this machine pass through this chain. FORWARD, the</description>
    </item>
    
    <item>
      <title>How to use Docker on Mac</title>
      <link>https://www.sobyte.net/post/2022-06/docker-macos/</link>
      <pubDate>Wed, 08 Jun 2022 19:53:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/docker-macos/</guid>
      <description>1. Objectives The core goal of this article: Use the full docker cli command on a Mac, including support for basic -v mounts. Support for x86 emulation, with the ability to build or run images for x86. CPU architecture switching where possible, preferably for both arm64 and x86. 2. the choice of tools First of all, we are most familiar with Docker Desktop, the installation package is huge and the</description>
    </item>
    
    <item>
      <title>Accelerating Image Compilation with Docker BuildKit</title>
      <link>https://www.sobyte.net/post/2022-06/docker-buildkit/</link>
      <pubDate>Fri, 03 Jun 2022 11:02:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/docker-buildkit/</guid>
      <description>Now the deployment of the compilation process will certainly use Docker, regardless of testing and deployment are implemented in Docker as far as possible, to achieve environmental isolation. But how to shorten Docker in the compilation of Image time, this is a problem, this article to introduce you to an experimental feature is BuildKit.
Prepare beforehand Since BuildKit is an experimental feature, the default installation of Docker will not enable this feature.</description>
    </item>
    
    <item>
      <title>Gracefully shutting down services with docker-compose</title>
      <link>https://www.sobyte.net/post/2022-05/docker-compose-graceful-stop/</link>
      <pubDate>Mon, 30 May 2022 16:45:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/docker-compose-graceful-stop/</guid>
      <description>You should have encountered that if the service still has jobs to be processed and the service is to be updated, you need to wait until all jobs are processed before you can stop the service. When the service receives a shutdown notification signal, it should stop accepting jobs first, and then wait for the worker to finish processing the jobs before stopping the service, and then go online again. How to stop the service by docker-compose is the focus of this article.</description>
    </item>
    
    <item>
      <title>Docker Desktop announces support for Linux</title>
      <link>https://www.sobyte.net/post/2022-05/docker-desktop/</link>
      <pubDate>Sat, 14 May 2022 12:14:55 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/docker-desktop/</guid>
      <description>At DockerCon 2022, Docker made a great announcement - Docker Desktop for Linux was released! This means that Docker Desktop is now officially available for Linux users!
The release of Docker Desktop for Linux brings the productivity benefits of Docker Desktop to developers using Linux workstations. Keep in mind that before this, Docker Desktop was only available to users of Mac and Windows workstations.
Docker Desktop for Linux Now Linux desktop environment developers and users can use Docker Desktop on Linux to seamlessly create containers with the exact same Docker Desktop experience on macOS and Windows, including access to the latest features like Docker Extensions.</description>
    </item>
    
    <item>
      <title>Docker&#39;s Live Restore feature</title>
      <link>https://www.sobyte.net/post/2022-05/docker-live-restore/</link>
      <pubDate>Fri, 13 May 2022 13:43:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/docker-live-restore/</guid>
      <description>We all know that Docker is a C/S model architecture, where containers are created and managed by accessing the Docker Daemon through a client (CLI). By default, when the daemon terminates, it stops all running containers.
So when we need to upgrade the Docker Daemon or perform some maintenance operations that require restarting, we need to cause the running containers to restart along with it.
Live Restore In fact, Docker provides a feature that keeps containers running when Daemon is unavailable, thus reducing container downtime when Daemon is upgraded or has problems.</description>
    </item>
    
    <item>
      <title>New command for Docker - sbom</title>
      <link>https://www.sobyte.net/post/2022-05/docker-sbom-cli/</link>
      <pubDate>Thu, 12 May 2022 19:33:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/docker-sbom-cli/</guid>
      <description>In the previous release of Docker Desktop v4.7.0, a new CLI plugin was added - docker/sbom- cli-plugin, which adds a subcommand to the Docker CLI - sbom - for viewing the Software Bill of Materials (SBOM) of Docker container images.
What is SBOM? First of all, let&amp;rsquo;s introduce what is SBOM (Software Bill of Materials), which we call Software Bill of Materials, is a term used in the software supply chain.</description>
    </item>
    
    <item>
      <title>Connecting to remote nodes using Docker Context</title>
      <link>https://www.sobyte.net/post/2022-05/docker-context/</link>
      <pubDate>Mon, 09 May 2022 20:06:06 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/docker-context/</guid>
      <description>Prior to Docker v19.03, we could use the DOCKER_HOST environment variable to configure and connect to remote Docker hosts. Since Docker v19.03, Docker&amp;rsquo;s command line interface (CLI) has added a subcommand: context, which is used to manage docker clients connecting to multiple contexts.
The context command allows you to connect and manage multiple Docker hosts remotely by configuring contexts for the SSH protocol, as well as exporting a context environment from a machine with the Docker CLI installed and importing it on another machine with the Docker CLI installed.</description>
    </item>
    
    <item>
      <title>Some tips for building Docker images</title>
      <link>https://www.sobyte.net/post/2022-05/docker-image-tips/</link>
      <pubDate>Sun, 08 May 2022 16:58:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/docker-image-tips/</guid>
      <description>In my previous blog on how Docker (containers) works, I described how Docker image works. In simple terms, it uses Linux&amp;rsquo;s overlayfs, overlay file system, to merge two file systems together, with the lower file system being read-only and the upper file system being writable. If you read, you find the upper layer and read the upper layer, otherwise you find the lower layer and read it to you. Then if you write, you write to the upper layer.</description>
    </item>
    
    <item>
      <title>Build Docker images with multi-system architecture support</title>
      <link>https://www.sobyte.net/post/2022-05/docker-multi-system-image/</link>
      <pubDate>Mon, 02 May 2022 10:29:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/docker-multi-system-image/</guid>
      <description>This article documents my experience in building Docker images for multi-system architectures, as well as some of my personal understandings.
Pre-requisite knowledge CPU architectures The mainstream CPU architectures are of two types: x86 and ARM, but they are not always named as such during development. For example, amd64 and x86_64 refer to the 64-bit architecture of x86, while arm64v8, aarch64, and arm64 refer to the 64-bit architecture of ARM.
In the docker hub, the supported architectures are listed for all major images, and you can filter the images by Architectures.</description>
    </item>
    
    <item>
      <title>How to use the COPY command in Dockerfile to copy a folder?</title>
      <link>https://www.sobyte.net/post/2022-04/docker-copy/</link>
      <pubDate>Sat, 30 Apr 2022 09:43:04 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/docker-copy/</guid>
      <description>Today, I encountered an unexpected situation when copying a folder using COPY while writing a dockerfile. I&amp;rsquo;ll document the correct way to use it here.
Background Notes Today, when I copied the folder to the image via dockerfile, I found that the contents of the folder were copied in.
The dockerfile looks like this.
1 2 3 4 5  FROMnode:alpineWORKDIR/usr/src/appCOPY dist node_modules package.json ./EXPOSE3000CMD [&amp;#34;yarn&amp;#34;, &amp;#34;start:prod&amp;#34;]  I wanted to copy both dist and node_modules folders into the mirror, but I didn&amp;rsquo;t want to use multiple COPYs to copy them separately, which would result in an extra layer, and found that dist and node_modules folders themselves were not copied into the mirror, but the contents of the folders were copied into the mirror separately.</description>
    </item>
    
    <item>
      <title>Enabling the Brotli compression algorithm for Nginx in Docker</title>
      <link>https://www.sobyte.net/post/2022-04/docker-nginx-brotli/</link>
      <pubDate>Sat, 30 Apr 2022 09:36:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/docker-nginx-brotli/</guid>
      <description>In order to save server bandwidth and speed up pages, we want to enable the Brotli plugin for Nginx. I found out that Brotli, a very popular lossless compression plugin, is still not included in the official Nginx docker image, so we have to do it ourselves.
1. Results I pushed the built image to Github&amp;rsquo;s Docker registry, which can be used directly if you are too lazy to toss it.</description>
    </item>
    
    <item>
      <title>How to improve the security of Docker containers</title>
      <link>https://www.sobyte.net/post/2022-04/docker-safe/</link>
      <pubDate>Mon, 18 Apr 2022 13:32:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/docker-safe/</guid>
      <description>With the rise of Docker, more and more projects use Docker to build production environments, because the container is light enough to quickly start and migrate business services, but in the process of using, we can easily ignore the project security issues, although the container has the role of isolation, but we know that he and the virtual machine architecture gap is still relatively large.
Virtual machine by adding Hypervisor layer, virtualized Network card, memory, CPU and other virtual hardware, and then build virtual machines on it, each virtual machine has its own system kernel.</description>
    </item>
    
    <item>
      <title>Principles of container technology (5): file system isolation and sharing</title>
      <link>https://www.sobyte.net/post/2022-04/container-fundamentals-filesystem-isolation-and-sharing/</link>
      <pubDate>Sat, 16 Apr 2022 16:41:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/container-fundamentals-filesystem-isolation-and-sharing/</guid>
      <description>Background Knowledge All accessible files on a Unix system are organized in a huge tree-like file hierarchy, the root node of which is the / directory. These files can be scattered and stored in different devices, provided that we mount the file systems on those devices into the file tree using the mount system call. Directories vs. file systems It is important to understand the difference between a file system</description>
    </item>
    
    <item>
      <title>Principles of container technology (4): Using Capabilities to Implement Permission Control</title>
      <link>https://www.sobyte.net/post/2022-04/container-fundamentals-permission-control-using-capabilities/</link>
      <pubDate>Sat, 16 Apr 2022 16:27:28 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/container-fundamentals-permission-control-using-capabilities/</guid>
      <description>If you run a container with runc and do the following, you will get interesting results. 1 2 3 4 5 6 $ whoami root $ id -u root 0 $ hostname mybox hostname: sethostname: Operation not permitted Even if we use the root user with a UID of 0, we do not have the privilege to change the hostname. The fact that the root user has the highest privileges</description>
    </item>
    
    <item>
      <title>Principles of container technology (3): Using Cgroups to Implement Resource Limits</title>
      <link>https://www.sobyte.net/post/2022-04/container-fundamentals-resource-limitation-using-cgroups/</link>
      <pubDate>Sat, 16 Apr 2022 16:13:31 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/container-fundamentals-resource-limitation-using-cgroups/</guid>
      <description>cgroups (control groups) is a feature provided by the Linux kernel that limits, accounts for, and isolates the system resources (such as CPU, memory, disk I/O, network, etc.) used by a group of processes. In the previous article we have understood the role that Namespace plays in container technology. If Namespace controls what processes in a container can see, then cgroups controls how many resources processes in a container can</description>
    </item>
    
    <item>
      <title>Principles of container technology (2): using Namespace to achieve process isolation</title>
      <link>https://www.sobyte.net/post/2022-04/container-fundamentals-process-isolation-using-namespace/</link>
      <pubDate>Sat, 16 Apr 2022 14:41:00 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/container-fundamentals-process-isolation-using-namespace/</guid>
      <description>Namespace is a feature provided by the Linux kernel that wraps some system resources into an abstract space and makes the processes in that space think that these resources are the only resources available in the system. It isolates processes and resources from the host system and other containers. There are many types of namespace depending on the system resources they operate on, such as cgroup namespace, mount namespace, etc.</description>
    </item>
    
    <item>
      <title>Pprinciple of container technology (1): from the fundamental understanding of the container image</title>
      <link>https://www.sobyte.net/post/2022-04/container-fundamentals-learn-container-with-oci-spec/</link>
      <pubDate>Sat, 16 Apr 2022 14:09:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/container-fundamentals-learn-container-with-oci-spec/</guid>
      <description>Starting with the OCI specification The OCI (Open Container Initiative) specification is the de facto container standard that has been adopted by most container implementations and container orchestration systems, including Docker and Kubernetes, and was introduced in 2015 by Dokcer as the lead company. Starting with the OCI specification to understand container images allows us to build a clearer picture of container technology rather than getting bogged down in implementation</description>
    </item>
    
    <item>
      <title>How to use docker buildx to build cross-platform Go images</title>
      <link>https://www.sobyte.net/post/2022-04/docker-buildx/</link>
      <pubDate>Sat, 16 Apr 2022 11:01:41 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/docker-buildx/</guid>
      <description>Running applications on different operating systems and processor architectures is a common scenario, so it is a common practice to build separate distributions for different platforms. This is not easy to achieve when the platform we use to develop the application is different from the target platform for deployment. For example, developing an application on an x86 architecture and deploying it to a machine on an ARM platform usually requires preparing the ARM platform infrastructure for development and compilation.</description>
    </item>
    
    <item>
      <title>How to shutdown containers gracefully</title>
      <link>https://www.sobyte.net/post/2022-04/graceful-shutdown-docker/</link>
      <pubDate>Wed, 06 Apr 2022 14:57:31 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/graceful-shutdown-docker/</guid>
      <description>I recently read through the official Docker Docker Reference documentation again and found that There are still a lot of details to dig into. For writing Dockerfile, most of the time there is no big problem as long as you follow it. But it would be more interesting to understand more deeply. To talk about how to gracefully close the container, we have to mention the idea of Signal, and</description>
    </item>
    
    <item>
      <title>Two ways to migrate the default installation (storage) directory for Docker</title>
      <link>https://www.sobyte.net/post/2022-03/migrate-docker-installation-directory/</link>
      <pubDate>Wed, 30 Mar 2022 09:43:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/migrate-docker-installation-directory/</guid>
      <description>A while ago, I bought a data cloud disk for my cloud server to be mounted on, as the main storage of those data that occupy large disks in the future, so I thought of migrating some software data directories that were previously installed in the root directory / under the system to the new data disk mount directory, the first migration is Docker, my server system release version is</description>
    </item>
    
    <item>
      <title>Rails on Docker: Build a development environment with Docker Compose</title>
      <link>https://www.sobyte.net/post/2022-03/rails-on-docker/</link>
      <pubDate>Tue, 22 Mar 2022 08:58:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rails-on-docker/</guid>
      <description>Why use Docker First of all, why should I use Docker in a development environment when it&amp;rsquo;s better to build it directly on my local system? Using Docker in a development environment provides the following benefits. Solidify the development environment into a configuration file, which makes it easy for new developers to start. Isolating system dependencies across projects to avoid interactions. Make the development environment as close to the production</description>
    </item>
    
    <item>
      <title>How to cache third-party dependencies in a phased build</title>
      <link>https://www.sobyte.net/post/2022-03/how-to-cache-third-party-package-whilie-building-in-stage/</link>
      <pubDate>Sat, 19 Mar 2022 11:39:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/how-to-cache-third-party-package-whilie-building-in-stage/</guid>
      <description>In non-phased build scenarios, when using containers for builds, we can mount the cache directory in the container to the build host to perform the build task; then copy the product to the run image to make the application image. However, in a phased build, the build image and the run image are in the same Dockerfile, which makes it difficult to optimize the cache for third-party dependencies.
1. Create a Vue instance project   Install the Vue CLI</description>
    </item>
    
    <item>
      <title>Migrating Docker storage to a new drive</title>
      <link>https://www.sobyte.net/post/2022-03/how-to-migrate-docker-storage-to-new-disk/</link>
      <pubDate>Sat, 19 Mar 2022 11:34:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/how-to-migrate-docker-storage-to-new-disk/</guid>
      <description>1. hard disk formatting   View new disk
1  fdisk -l     Usually, the name of the second hard disk will be /dev/sdb.
  Disk partition
1  fdisk /dev/sdb     There will be a prompt to enter the following parameters.
1 2 3 4  command (m for help):n Partition number(1-4):1 First cylinder (1-22800,default 1):Enter command (m for help):w     Format the disk as ext4</description>
    </item>
    
    <item>
      <title>Build container images in the pipeline using the docker in pod method</title>
      <link>https://www.sobyte.net/post/2022-03/docker-in-pod/</link>
      <pubDate>Fri, 18 Mar 2022 09:03:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/docker-in-pod/</guid>
      <description>docker has been criticized in the Kubernetes community for being a CRI, but it&amp;rsquo;s important to understand that CRIs are only part of docker&amp;rsquo;s functionality. There are still many areas that rely heavily on docker for local development testing or CI/CD streamline image builds. For example, docker&amp;rsquo;s official build-push-action is the preferred method for building container images on GitHub. Even docker&amp;rsquo;s rivals podman + skopeo + buildah are using docker</description>
    </item>
    
    <item>
      <title>Container tool without Daemon process: Podman</title>
      <link>https://www.sobyte.net/post/2022-03/podman/</link>
      <pubDate>Mon, 14 Mar 2022 09:19:53 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/podman/</guid>
      <description>What is a container Linux container technology A Linux container is a process with specific isolation provided by the Linux Kernel. Linux container technology allows you to package or isolate your application and its entire runtime environment (including all required files) together. This allows users to easily migrate applications between environments while retaining the full functionality of the application. Docker&amp;rsquo;s problem Docker is a famous open source container engine, which</description>
    </item>
    
    <item>
      <title>Container persistence methods</title>
      <link>https://www.sobyte.net/post/2022-03/container-persistence-methods/</link>
      <pubDate>Sat, 12 Mar 2022 11:56:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/container-persistence-methods/</guid>
      <description>A container acts as an instance of a image, a runtime for stateless applications in the images. Stateless is so-called because the lifecycle of a container is very flexible. When a container&amp;rsquo;s lifecycle ends, the data generated during that time does not persist, but is removed with the deletion of the container. However, most applications are for data now, so the persistence of containers is explored here.
Storage for containers Before we discuss container persistence, let&amp;rsquo;s explore what data storage looks like without persistence, i.</description>
    </item>
    
    <item>
      <title>Jib builds Docker images efficiently</title>
      <link>https://www.sobyte.net/post/2022-03/jib-docker/</link>
      <pubDate>Tue, 08 Mar 2022 09:22:31 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/jib-docker/</guid>
      <description>1. Preface Jib is a class library developed by Google to build Docker and OCI images of Java applications directly, provided as Maven and Gradle plugins. The best part is that it can be built without the Docker daemon, i.e. you don&amp;rsquo;t have to install the docker daemon on your computer! Although Spring Boot 2.3.0.RELEASE has already been released with the ability to build images, I couldn&amp;rsquo;t resist trying Jib.</description>
    </item>
    
    <item>
      <title>Deploying magento2 with docker-compose</title>
      <link>https://www.sobyte.net/post/2022-03/docker-compose-magento2/</link>
      <pubDate>Mon, 07 Mar 2022 10:11:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/docker-compose-magento2/</guid>
      <description>Environment centos 7 2-core 8g docker 1.13.1 docker-compose 1.24.1 Versions of each container php:7.3-fpm-buster mysql:8.0 nginx:1.21 redis:6.2 frp using debian:10-slim as the base image build The specific version is 0.38.0 frp&amp;rsquo;s main role is to act as a proxy for xdebug elasticsearch:7.9 The magento version is 2.3.4 The following section assumes that docker and docker-compose are already installed. This is intended as a development environment, so the code is not</description>
    </item>
    
    <item>
      <title>How to use docker buildx to build multi-architecture Go images</title>
      <link>https://www.sobyte.net/post/2022-03/building-multi-architecture-images-with-docker-buildx/</link>
      <pubDate>Thu, 03 Mar 2022 10:49:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/building-multi-architecture-images-with-docker-buildx/</guid>
      <description>Running applications on different operating systems and processor architectures is a common scenario, so it is a common practice to build separate distributions for different platforms. This is not easy to achieve when the platform we use to develop the application is different from the target platform for deployment. For example, developing an application on an x86 architecture and deploying it to a machine on an ARM platform usually requires preparing the ARM platform infrastructure for development and compilation.</description>
    </item>
    
    <item>
      <title>Deploy Jenkins services using Docker</title>
      <link>https://www.sobyte.net/post/2022-02/deploy-jenkins/</link>
      <pubDate>Wed, 23 Feb 2022 09:41:51 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/deploy-jenkins/</guid>
      <description>This article documents the process of building a Jenkins service from scratch using Docker.
Before you start This article assumes that you already have some basic knowledge of Linux, command line operations, ssh, and other tools.
Installing Docker Docker offers unprecedented ease of deployment of services, and an introduction to it can be found at official website.
To install Docker, just follow the steps, here is the link to the official tutorial.</description>
    </item>
    
    <item>
      <title>Run the sshd service inside the container</title>
      <link>https://www.sobyte.net/post/2022-01/container-sshd/</link>
      <pubDate>Sat, 15 Jan 2022 11:48:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/container-sshd/</guid>
      <description>I want to share data with different friends, but I don&amp;rsquo;t really want to create new users on my system. Because in most Linux distributions, the default umask is 022, which means that other users can access my home directory and read files at will, which means no privacy and no security. If my friend&amp;rsquo;s account/password is accidentally leaked, it will also endanger all the data in my system, I</description>
    </item>
    
    <item>
      <title>Docker install mysql</title>
      <link>https://www.sobyte.net/post/2022-01/docker-mysql/</link>
      <pubDate>Fri, 14 Jan 2022 13:02:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/docker-mysql/</guid>
      <description>MySQL is the world&amp;rsquo;s most popular open source database. With its reliability, ease of use and performance, MySQL has become the database of choice for web applications. 1. Check the available MySQL versions mirror of mysql Alternatively, you can search for available versions by docker search mysql. 2. Pull the mysql image 1 2 3 4 5 6 docker pull mysql:latest 或者拉取其他版本 docker</description>
    </item>
    
    <item>
      <title>Iptables And Docker Container Network Analysis</title>
      <link>https://www.sobyte.net/post/2022-01/iptables-and-container-networks/</link>
      <pubDate>Sat, 08 Jan 2022 13:49:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/iptables-and-container-networks/</guid>
      <description>This article is only for ipv4 networks This article first introduces the basic concept and common commands of iptables, and then analyzes how docker/podman is a standalone container network implemented with iptables and Linux virtual network interface. iptables iptables provides packet filtering, NAT and other packet handling capabilities. iptables is most used in firewall and NAT scenarios. Both iptables and the new nftables are based on netfilter and are subprojects</description>
    </item>
    
    <item>
      <title>Avoid files gaining root privileges when docker mounts</title>
      <link>https://www.sobyte.net/post/2021-12/mount-docker-without-creating-root-file/</link>
      <pubDate>Fri, 31 Dec 2021 22:00:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/mount-docker-without-creating-root-file/</guid>
      <description>When docker mounts the disk, as many containers use root to run programs inside the container, it will cause the files generated in the mount belong to root:root. generally the user outside the container is not root, which will make file sharing or even reading logs unnecessary trouble. This article aims to solve the problem of generating root privileged files from the root without changing the container.
The files generated by docker often need to be accessed by sudo chmod o+rw *, which is troublesome, but at least you have sudo privileges.</description>
    </item>
    
    <item>
      <title>Dockerfile Best Practices for Accelerating the Development Process</title>
      <link>https://www.sobyte.net/post/2021-12/speed-up-develop-flow-dockerfile-best-practices/</link>
      <pubDate>Wed, 15 Dec 2021 18:01:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/speed-up-develop-flow-dockerfile-best-practices/</guid>
      <description>A Dockerfile is the starting point for creating a Docker image, which provides a well-defined set of instructions that allow us to copy files or folders, run commands, set environment variables, and perform other tasks needed to create a container image. It is important to write Dockerfile to ensure that the generated images are safe, small, fast to build and fast to update.
In this article we&amp;rsquo;ll see how to write good Dockerfiles to speed up the development process, ensure build reusability, and generate images that are safe to deploy to production.</description>
    </item>
    
    <item>
      <title>Why Kubernetes is replacing Docker</title>
      <link>https://www.sobyte.net/post/2021-11/whys-the-design-kubernetes-deprecate-docker/</link>
      <pubDate>Sat, 27 Nov 2021 11:39:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/whys-the-design-kubernetes-deprecate-docker/</guid>
      <description>Kubernetes is the de facto standard in container orchestration today, and Docker has played a pivotal role in containers from its inception to today, and is the default container engine in Kubernetes. However, in December 2020, the Kubernetes community decided to move forward with removing Dockershim-related code from its repositories, which was significant for both the Kubernetes and Docker communities.
I&amp;rsquo;m sure most developers have heard of Kubernetes and Docker and know that we can use Kubernetes to manage Docker containers, but they may not have heard of Dockershim, the Docker shim.</description>
    </item>
    
    <item>
      <title>Php Image Installation Module</title>
      <link>https://www.sobyte.net/post/2021-11/php-image-installation-module/</link>
      <pubDate>Wed, 24 Nov 2021 15:03:54 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/php-image-installation-module/</guid>
      <description>The default php:7.0.33-fpm image is missing a lot of modules, so building it directly using Dockerfile would be a bit of a hassle, and it&amp;rsquo;s also quite large. So I went directly into the container and installed it, and finally generated an image of my own tmaize/php7-fpm based on the container. I&amp;rsquo;ll record the steps here, maybe I&amp;rsquo;ll use them later Description The original image already has the following source</description>
    </item>
    
    <item>
      <title>Docker installation of multi-user version of JupyterHub</title>
      <link>https://www.sobyte.net/post/2021-11/docker-jupyterhub/</link>
      <pubDate>Sat, 20 Nov 2021 16:10:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/docker-jupyterhub/</guid>
      <description>The host server is using Ubuntu 18.04. Note that Docker does not currently support Ubuntu 19.10. To use Docker in 19.10, you need to set the Ubuntu 18.04 version identifier: bionic in the Docker source configuration. 1 deb[arch=amd64]https://download.docker.com/linux/ubuntubionicstable Docker installation The installation process of Docker is very simple, just execute the following command. 1 2 3 4 5 6 7 8 9 sudo apt remove docker docker-engine docker.io sudo apt</description>
    </item>
    
    <item>
      <title>Gitlab CI&#39;s Docker Cache in Kubernetes</title>
      <link>https://www.sobyte.net/post/2021-11/gitlab-ci-docker-layer-cache-for-k8s-executor/</link>
      <pubDate>Sat, 13 Nov 2021 13:53:50 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/gitlab-ci-docker-layer-cache-for-k8s-executor/</guid>
      <description>In the previous article on how to use GitLab CI for CI/CD in a Kubernetes cluster, we basically used the Docker On Docker model for building images, because the Kubernetes cluster uses a container runtime like Docker, so we could mount the host docker.sock file from the host to the container to build the image, but recently we changed the container runtime to Containerd after using Kubernetes version 1.22.X, so</description>
    </item>
    
    <item>
      <title>Building images without Dockerfile: BuildPack vs Dockerfile</title>
      <link>https://www.sobyte.net/post/2021-11/buildpack-vs-dockerfile/</link>
      <pubDate>Mon, 01 Nov 2021 13:27:34 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-11/buildpack-vs-dockerfile/</guid>
      <description>In the past, we have built technology platforms using microservices, containerization, and service orchestration. To improve the efficiency of our development teams, we also provide the CICD platform for rapid deployment of code to Openshift (an enterprise-class Kubernetes) clusters. The first step of deployment is to containerize the application, and the continuous integration deliverables have changed from jar packages, webpack, etc. to container images. Containerization packages the software code and</description>
    </item>
    
    <item>
      <title>Earthly A more powerful image builder </title>
      <link>https://www.sobyte.net/post/2021-10/the-best-image-build-tool-earthly/</link>
      <pubDate>Sun, 31 Oct 2021 17:21:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/the-best-image-build-tool-earthly/</guid>
      <description>Introduction to Earthly Earthly is a more advanced Docker image builder, Earthly replaces the traditional Dockerfile with its own Earthfile; Earthfile is as Earthly officially describes: Makefile + Dockerfile = Earthfile Earthly supports some Dockerfile extension syntax through buildkit, and integrates Dockerfile with Makefile, making it easier to build and code Dockerfile for multiple platforms; Earthly makes it easier to reuse Dockerfile code and more CI-friendly automatic integration. Quick Start</description>
    </item>
    
    <item>
      <title>Docker Deployment FastDFS</title>
      <link>https://www.sobyte.net/post/2021-10/docker-deploy-fastdfs/</link>
      <pubDate>Mon, 04 Oct 2021 09:49:30 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-10/docker-deploy-fastdfs/</guid>
      <description>If your FastDFS file system needs high availability and needs to be deployed on multiple machines, and you only run FastDFS on these servers, then FastDFS may not be suitable for deployment with Docker, it can be deployed directly on the machines according to the official documentation, there is no need to use containers to deploy. In fact, FastDFS is not suitable for containerized deployment, because the tracker server reports</description>
    </item>
    
    <item>
      <title>docker registry migration to harbor</title>
      <link>https://www.sobyte.net/post/2021-09/docker-registry-to-harbor/</link>
      <pubDate>Wed, 29 Sep 2021 16:25:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/docker-registry-to-harbor/</guid>
      <description>Registry Docker Distribution Docker Distribution is the first tool that implements packaging, distribution, storage and image distribution, acting as a Docker registry. (Currently Distribution has been donated to CNCF). The spec specification in Docker Distribution has since become the OCI distribution-spec specification. It can be assumed that Docker Distribution implements most of the OCI image distribution specifications, and that the two are largely compatible. OCI&amp;rsquo;s guiding philosophy is to have</description>
    </item>
    
    <item>
      <title>Understanding the Container Runtime Containerd in one article</title>
      <link>https://www.sobyte.net/post/2021-09/containerd-usage/</link>
      <pubDate>Mon, 27 Sep 2021 14:38:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/containerd-usage/</guid>
      <description>Before learning Containerd we need to do a brief review of Docker&amp;rsquo;s development history, because it involves a bit more components in practice, there are many we will often hear, but it is not clear what these components are really for, such as libcontainer, runc, containerd, CRI, OCI and so on. Docker Since Docker 1.11, Docker containers are not simply started by Docker Daemon, but by integrating containerd, runc and</description>
    </item>
    
    <item>
      <title>Automating Docker Publishing With GitHub Action</title>
      <link>https://www.sobyte.net/post/2021-07/automating-docker-publishing-with-github-action/</link>
      <pubDate>Sat, 17 Jul 2021 11:22:01 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/automating-docker-publishing-with-github-action/</guid>
      <description>Recently, I&amp;rsquo;ve been using GitHub Actions for my company&amp;rsquo;s internal project release process, and it&amp;rsquo;s been a great experience.
The main goal of this article is to help newcomers to GitHub Actions to quickly build automated tests and package and push Docker images.
Create project This article focuses on Go as an example, but of course other languages are similar and have little to do with the language itself.
Here we start by creating a project on GitHub and writing a few simple pieces of code main.</description>
    </item>
    
    <item>
      <title>Docker Serious Error Causes Enterpris Data to Be Deleted by Hackers</title>
      <link>https://www.sobyte.net/post/2021-06/docker-serious-error-causes-enterpris-data-to-be-deleted-by-hackers/</link>
      <pubDate>Wed, 30 Jun 2021 18:17:41 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/docker-serious-error-causes-enterpris-data-to-be-deleted-by-hackers/</guid>
      <description>Be cautious of popular technologies that promise to make work easy - they often cut corners, and security is often one of them.
A few days ago, the database of NewsBlur (a web-based RSS reader) was deleted by a hacker due to a bug that existed in Docker for years.
In a blog post this week, NewsBlur founder Samuel Clay detailed his ordeal: during a migration of a MongoDB cluster to a Docker container, a hacker gained access to the NewsBlur database, deleted 250GB of raw data, and demanded a 0.</description>
    </item>
    
    <item>
      <title>Building a Docker Private Registry</title>
      <link>https://www.sobyte.net/post/2021-06/building-a-docker-private-registry/</link>
      <pubDate>Wed, 16 Jun 2021 10:32:10 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-06/building-a-docker-private-registry/</guid>
      <description>Registry Classification  Sponsor Registry: a third-party registry for customers and communities Mirror Registry: third-party registry, only available to users Vendor Registry: The registry provided by the vendor that published the image Private Registry: Private registry with fire period and extra security layer (ssl)  Why you need a private registry Generally deployed locally self-built (using intranet), if you use aliyun directly use the registry of ali can be.
 Hosted Mirror Low bandwidth consumption Fast download speed Rapid Deployment  Install docker-registry To install registry in ubuntu 16.</description>
    </item>
    
  </channel>
</rss>
