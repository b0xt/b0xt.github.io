<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>istio on SoByte</title>
    <link>https://www.sobyte.net/tags/istio/</link>
    <description>Recent content in istio on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Jul 2022 10:53:04 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/istio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Istio Sidecar&#39;s interception mechanism for traffic</title>
      <link>https://www.sobyte.net/post/2022-07/istio-sidecar-proxy/</link>
      <pubDate>Mon, 18 Jul 2022 10:53:04 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/istio-sidecar-proxy/</guid>
      <description>The basic process of flowing traffic through a host  Inbound traffic passes through the NIC and enters the host&amp;rsquo;s network stack. the protocol stack checks the messages against pre-customized network rules (iptables/netfilter). after the stack rules check, compliant Inbound traffic enters from kernel space to user space and enters the process that specifies the listening port. the user process in the user state receives the network traffic message for processing and returns the processed result to the network protocol stack in kernel space via user space.</description>
    </item>
    
    <item>
      <title>Istio Sidecar injection mechanism</title>
      <link>https://www.sobyte.net/post/2022-07/istio-sidecar-injection/</link>
      <pubDate>Sun, 17 Jul 2022 13:15:00 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/istio-sidecar-injection/</guid>
      <description>Service Mesh and Sidecar Concepts Before understanding the injection mechanism of Sidecar, it&amp;rsquo;s important to clarify the what and why questions.
First, what is a Service Mesh?
Service Mesh, or translated as &amp;ldquo;Service Mesh&amp;rdquo;, is a configurable low-latency infrastructure layer designed to handle a large amount of network-based inter-process communication between application services through APIs (Application Programming Interfaces). The Service Grid ensures fast, reliable and secure communication between infrastructure services of containerized transient presence applications.</description>
    </item>
    
    <item>
      <title>Istio and Service Mesh</title>
      <link>https://www.sobyte.net/post/2022-03/istio-and-service-mesh/</link>
      <pubDate>Sun, 13 Mar 2022 11:26:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/istio-and-service-mesh/</guid>
      <description>Recently, Service Mesh has become more and more popular and popular, and various community discussions have emerged. In the face of such a hot technology, we have some questions: What exactly is Service Mesh and what does it solve? In this article, we try to briefly explain the architectural design of Service Mesh and introduce its popular solution, Istio.
Starting with distributed systems Modern applications rarely use monolithic architectures anymore, and when distributed architectures become mainstream, network calls between system components become a natural problem.</description>
    </item>
    
  </channel>
</rss>
