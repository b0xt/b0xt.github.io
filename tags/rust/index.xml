<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on SoByte</title>
    <link>https://www.sobyte.net/tags/rust/</link>
    <description>Recent content in rust on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Aug 2022 13:22:52 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compiling Rust projects with Nix</title>
      <link>https://www.sobyte.net/post/2022-08/rust-nix/</link>
      <pubDate>Wed, 03 Aug 2022 13:22:52 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-08/rust-nix/</guid>
      <description>Rust projects are generally managed with Cargo, but it has the disadvantage of having to recompile all dependencies once per project, taking up a lot of hard disk space, and not being able to share the build cache across projects. After some research, there are several Nix-based Rust build tools:
cargo2nix: https://github.com/cargo2nix/cargo2nix carnix: no longer updated crane: https://github.com/ipetkov/crane crate2nix: https://github.com/kolloch/crate2nix naersk: https://github.com/nix-community/naersk nocargo: https://github.com/oxalica/nocargo I&amp;rsquo;ll try out each of these tools below.</description>
    </item>
    
    <item>
      <title>Rust Pin Advanced</title>
      <link>https://www.sobyte.net/post/2022-07/rust-pin-advanced/</link>
      <pubDate>Sat, 30 Jul 2022 12:58:47 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/rust-pin-advanced/</guid>
      <description>The last article on Pin was a shallow introduction to what Pin is all about and why it is needed, but it is still not enough to master that part of knowledge, so this article hopes to systematically sort out the knowledge points related to Pin, so I named the title &amp;ldquo;Rust Pin Advanced&amp;rdquo;.
Pin API Anatomy To understand Pin in depth, it is essential to be familiar with all of its methods.</description>
    </item>
    
    <item>
      <title>Pin and Unpin in Rust</title>
      <link>https://www.sobyte.net/post/2022-07/rust-pin-unpin/</link>
      <pubDate>Sat, 30 Jul 2022 12:27:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/rust-pin-unpin/</guid>
      <description>On February 28, 2019, Rust version 1.33 was released, adding new pinning APIs, mainly including these.
std::pin::Pin std::marker::Unpin std::marker::PhantomPinned impl !Unpin for T When I first encountered these concepts, I felt that they were particularly convoluted and difficult to understand thoroughly. There are also many articles on the Internet about Pin and Unpin, but I feel that they are not particularly clear. It&amp;rsquo;s also difficult to understand the std::pin module documentation directly.</description>
    </item>
    
    <item>
      <title>serde custom serialization</title>
      <link>https://www.sobyte.net/post/2022-07/serde/</link>
      <pubDate>Mon, 25 Jul 2022 13:04:38 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/serde/</guid>
      <description>serde is pretty much the most commonly used serialization and deserialization library in the Rust ecosystem today.
Golang Implementation As a Golang programmer, it&amp;rsquo;s important to compare.
The official Golang library directly implements serialization and deserialization of json.
For both serialization and deserialization, Go uses a simple interface called interface.
1 2 3 4 5 6 7 8 9 // https://pkg.go.dev/encoding/json#Marshaler type Marshaler interface { MarshalJSON() ([]byte, error) } // https://pkg.</description>
    </item>
    
    <item>
      <title>Rust Learning Notes: package/crate/module</title>
      <link>https://www.sobyte.net/post/2022-07/rust-modules/</link>
      <pubDate>Mon, 11 Jul 2022 13:20:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/rust-modules/</guid>
      <description>cargo new generates the beginnings of a project, providing the src/main.rs and src/lib.rs files, but as the project grows, the amount of code becomes larger, and it is not appropriate to maintain a large amount of code in one file. This is when files are usually split by &amp;ldquo;modules&amp;rdquo;, and rust is no exception.
Here we learn how the code is organized in rust, mainly involving the following concepts.
package: a concept in Cargo that manages crate crate: a collection of modules, compilation units, both lib and bin, that is, for others to call, or an executable file module: used to organize code within crate workspace: when the project is complex, manage multiple packages package The cargo new command creates a new project, also a package, with a cargo.</description>
    </item>
    
    <item>
      <title>Hello Rust async/await</title>
      <link>https://www.sobyte.net/post/2022-07/rust-async/</link>
      <pubDate>Sun, 10 Jul 2022 14:08:40 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/rust-async/</guid>
      <description>Rust&amp;rsquo;s support for async/await is becoming more and more mature, and in some scenarios it can be significantly more efficient than models such as threads. Here&amp;rsquo;s a brief look at how to get started with asynchronous programming in Rust the fastest way possible. Hello world async/await In Rust, asynchronous programming is abstracted as a Future trait, similar to a Promise in JavaScript. In recent Rust, Future objects can be created</description>
    </item>
    
    <item>
      <title>How Rust async/await is implemented internally</title>
      <link>https://www.sobyte.net/post/2022-07/rust-async-internal/</link>
      <pubDate>Sun, 10 Jul 2022 13:34:29 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/rust-async-internal/</guid>
      <description>A colleague asked how Rust aysnc/await is implemented, stopping at the await place and then resuming the execution (of the current thread/coroutine) when it continues, also using something like yield/generator?
I&amp;rsquo;ve tried it briefly, and I guess it&amp;rsquo;s probably like this.
The following code.
1 2 3 4 5 6 7 8 9 10 11 async fn say_world() { println!(&amp;#34;hello world&amp;#34;); } #[tokio::main] async fn main() { let op = say_world(); op.</description>
    </item>
    
    <item>
      <title>Array/Slice/Vector in Rust</title>
      <link>https://www.sobyte.net/post/2022-07/rust-array-slice-vector/</link>
      <pubDate>Sun, 10 Jul 2022 13:19:36 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/rust-array-slice-vector/</guid>
      <description>Regardless of the programming language, the most common data types are numeric, string, and array. Here array is a general term, generally refers to a collection that can hold multiple elements, but of course the collection here is not strictly mathematical definition. Array Let&amp;rsquo;s look at arrays first. An array is a collection of data of the same type, located in contiguous blocks of memory, and stored on the stack</description>
    </item>
    
    <item>
      <title>Some summaries on Rust string literals</title>
      <link>https://www.sobyte.net/post/2022-07/rust-string/</link>
      <pubDate>Sat, 09 Jul 2022 18:38:21 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-07/rust-string/</guid>
      <description>There are two types of strings in Rust, String and &amp;amp;str, where String can be dynamically allocated, modified, and the internal implementation can be understood as Vec&amp;lt;u8&amp;gt;, and &amp;amp;str is a slice of type &amp;amp;[u8]. Both of these strings can only hold legal UTF-8 characters.
For non-naturally recognizable UTF-8 characters, consider using the following types.
File paths have dedicated Path and PathBuf classes available. Use Vec&amp;lt;u8&amp;gt; and &amp;amp;[u8] Use OSString and &amp;amp;OSStr to interact with the operating system Use CString and &amp;amp;CStr to interact with C libraries The second method above is the common way to handle non-UTF-8 byte streams, which is to use Vec&amp;lt;u8&amp;gt; and &amp;amp;[u8], where we can also use literal values for both types of data, which we call byte string literals of type &amp;amp;[u8].</description>
    </item>
    
    <item>
      <title>Rust 1.63 will support Scoped Thread</title>
      <link>https://www.sobyte.net/post/2022-06/rust-scoped-thread/</link>
      <pubDate>Fri, 24 Jun 2022 13:07:13 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/rust-scoped-thread/</guid>
      <description>Members of the Rust development team introduced an important new feature to be added to the Rust 1.63 standard library: scoped thread. This is described as a system-level thread, and unlike thread::spawn(), scoped thread supports the use of local variables by threads, not just static variables.
Official example.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 use std::thread; let mut a = vec!</description>
    </item>
    
    <item>
      <title>Linus Torvalds: Rust For Linux may be merged into the Linux 5.20 kernel</title>
      <link>https://www.sobyte.net/post/2022-06/linxu-rust/</link>
      <pubDate>Wed, 22 Jun 2022 16:49:35 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/linxu-rust/</guid>
      <description>At the recent LINUX Foundation-Open Source Summit, Linus Torvalds, talking about &amp;ldquo;The Possibility of Rust in the LINUX Kernel&amp;rdquo;, said that he expects to merge the Rust infrastructure in the kernel soon (maybe even in the next version of Linux 5.20).
While no Rust requests for Linux have been sent in or merged yet, the Linux kernel has seen initial support for Rust in terms of basic implementations, such as some basic example drivers and so on.</description>
    </item>
    
    <item>
      <title>The basics of Rust</title>
      <link>https://www.sobyte.net/post/2022-06/rust-basics/</link>
      <pubDate>Mon, 13 Jun 2022 20:29:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/rust-basics/</guid>
      <description>I. What is Rust Rust is a general-purpose, compiled programming language developed under the leadership of Mozilla. The design guidelines are &amp;ldquo;safe, concurrent, and practical&amp;rdquo;, and support functional, concurrent, procedural, and object-oriented programming styles. &amp;ndash; Wikipedia
II. Language characteristics Language features
Rust is much closer in deep syntax to languages in the meta-language family like Haskell. Basically, every part of a function body is an expression, even a control flow operator.</description>
    </item>
    
    <item>
      <title>A Go developer&#39;s experience with Rust</title>
      <link>https://www.sobyte.net/post/2022-05/rust-view-from-a-gopher/</link>
      <pubDate>Fri, 20 May 2022 13:29:39 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/rust-view-from-a-gopher/</guid>
      <description>I&amp;rsquo;ve been following the development of Rust as a language, but I haven&amp;rsquo;t actually used it. Recently, I was interested in writing something, so I implemented a basic module in both Rust and Go. This article is some of the results of this implementation.
I have a long experience with Go, so this article will be relatively accurate about Go, but I have been following Rust for a long time, but the code is basically the result of the last week or so, so my opinion may be biased.</description>
    </item>
    
    <item>
      <title>Trait use and principle analysis</title>
      <link>https://www.sobyte.net/post/2022-05/trait-usage/</link>
      <pubDate>Tue, 03 May 2022 17:10:26 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/trait-usage/</guid>
      <description>Among Rust&amp;rsquo;s design goals, zero-cost abstraction is an important one, giving Rust the power of high-level language expression without the performance penalty. The cornerstones of zero-cost abstraction are generics and traits, which compile high-level syntax into efficient underlying code at compile time, enabling efficient runtime. This article introduces trait, including how it is used and an analysis of three common problems, to illustrate the principles of its implementation in the</description>
    </item>
    
    <item>
      <title>Rust, I got you.</title>
      <link>https://www.sobyte.net/post/2022-05/rust-gotchas/</link>
      <pubDate>Tue, 03 May 2022 16:41:48 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/rust-gotchas/</guid>
      <description>I&amp;rsquo;ve been using Rust for more than two years now, and despite countless struggles with the compiler, I still encounter problems from time to time that I can&amp;rsquo;t understand, not to mention newbies. What could be written in a few hours before may take a day with Rust, so it&amp;rsquo;s important to document some of the questions you have with Rust to deepen your understanding of the problem. RAII A</description>
    </item>
    
    <item>
      <title>What does Rust consider to be &#34;undefined&#34; and what is not &#34;unsafe&#34;?</title>
      <link>https://www.sobyte.net/post/2022-04/rust-considered-unsafe-undefined/</link>
      <pubDate>Sat, 30 Apr 2022 09:55:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-considered-unsafe-undefined/</guid>
      <description>You have heard that the Rust language has Safe as one of its features, but due to the sad fact that hardware is Unsafe, all &amp;ldquo;safe&amp;rdquo; must be encapsulated in &amp;ldquo;Insecure&amp;rdquo; must be encapsulated on top of &amp;ldquo;Insecure&amp;rdquo;. This leads to the fact that &amp;ldquo;Safe&amp;rdquo; in the full sense of the word is very difficult to achieve and extremely limited in functionality.
So let&amp;rsquo;s see where Rust&amp;rsquo;s Safe boundary lies.</description>
    </item>
    
    <item>
      <title>Plug-in mechanism via WebAssembly</title>
      <link>https://www.sobyte.net/post/2022-04/rust-plugin-with-webassembly/</link>
      <pubDate>Sat, 23 Apr 2022 14:27:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-plugin-with-webassembly/</guid>
      <description>plug-in Two days ago in the study of coco plug-in system, we often say to interface-oriented development rather than implementation-oriented, plug-in this thing, like the middleware in the back-end framework, we follow the framework defined interface to implement middleware, which can also be considered a plug-in, we have many mechanisms to achieve &amp;ldquo;Pre-compiler plug-in&amp;rdquo;, but like coco to compile and release the binary program, what is the way to allow</description>
    </item>
    
    <item>
      <title>Rust Object Oriented</title>
      <link>https://www.sobyte.net/post/2022-04/rust-object-oriented/</link>
      <pubDate>Sat, 23 Apr 2022 13:15:23 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-object-oriented/</guid>
      <description>How to quickly customize a collection type? A programmer familiar with some object-oriented languages might write it like this. 1 2 class MyCollection(Collection): ... Inherit some built-in type (if it exists) and extend on top of that built-in type. But for programmers familiar with Python, this is not a good idea. Types of ducks When a bird is seen walking like a duck, swimming like a duck, and quacking like</description>
    </item>
    
    <item>
      <title>Replacing the C version, the Ruby YJIT compiler implemented in Rust is complete</title>
      <link>https://www.sobyte.net/post/2022-04/rust-ruby-yjit/</link>
      <pubDate>Fri, 22 Apr 2022 22:37:13 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-ruby-yjit/</guid>
      <description>Last December, members of the Ruby JIT team proposed to port the YJIT codebase from C99 to Rust, and while a number of developers had reservations about this, the project was eventually approved by Ruby&amp;rsquo;s core developers and founder Matz.
Yesterday, the developers responsible for this project said they had completed a Ruby YJIT compiler implemented in Rust that effectively replaces the existing C version and is currently awaiting an upstream merge.</description>
    </item>
    
    <item>
      <title>Crate and mod in Rust</title>
      <link>https://www.sobyte.net/post/2022-04/rust-crate-mod/</link>
      <pubDate>Sun, 10 Apr 2022 16:08:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-crate-mod/</guid>
      <description>crate Let&amp;rsquo;s start with the official definition. A crate is a binary or library. The crate root is a source file that the Rust compiler starts from and makes up the root module of your crate (we&amp;rsquo;ll explain modules in depth in the &amp;ldquo;Defining Modules to Control Scope and Privacy&amp;rdquo; section). A package is one or more crates that provide a set of functionality. A package contains a Cargo.toml file</description>
    </item>
    
    <item>
      <title>Implementing io_uring based asynchronous random file reading in Rust</title>
      <link>https://www.sobyte.net/post/2022-04/rust-io-uring/</link>
      <pubDate>Sun, 10 Apr 2022 09:58:33 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-io-uring/</guid>
      <description>In a nutshell: In skyzh/uring-positioned-io, I wrapped the underlying io_uring interface provided by Tokio and implemented io_uring based asynchronous random file reading in Rust. You can use it like this.
1 ctx.read(fid, offset, &amp;amp;mut buf).await?; This article introduces the basic use of io_uring, then describes the implementation of an asynchronous read file library I wrote, and finally does a benchmark to compare performance with mmap.
Click here to visit the GitHub project.</description>
    </item>
    
    <item>
      <title>I love Rust Procedural Macros</title>
      <link>https://www.sobyte.net/post/2022-04/rust-proc-macro/</link>
      <pubDate>Fri, 08 Apr 2022 13:59:58 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-proc-macro/</guid>
      <description>Requirement Today I came across a requirement to generate a random instance of an enumeration type. Unlike Python, this is not as convenient and requires a specific Trait implementation with Rust. The simplest idea is to number the different members of the enum type, generate a random number, instantiate the corresponding member, and if the member has data, recursively generate that data at random. 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Manually implement zero-overhead async trait in Rust with GAT</title>
      <link>https://www.sobyte.net/post/2022-04/rust-gat-async-trait/</link>
      <pubDate>Fri, 08 Apr 2022 08:45:18 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-gat-async-trait/</guid>
      <description>In this article, we will explain how to implement a zero-overhead async trait in Rust using GAT, using a series of RocksDB-like iterators as an example. The code in this article requires nightly Rust to compile.
We will implement two iterators.
TestIterator: Produces an ordered sequence of KVs. ConcatIterator: stitch together sequences of multiple iterators. Example: TestIterator::new(0, 5) will produce the following sequence.
1 2 3 4 5 key_00000 -&amp;gt; value_00000 key_00001 -&amp;gt; value_00001 key_00002 -&amp;gt; value_00002 key_00003 -&amp;gt; value_00003 key_00004 -&amp;gt; value_00004 ConcatIterator::new(vec!</description>
    </item>
    
    <item>
      <title>Optimization of Rust Enum Layout </title>
      <link>https://www.sobyte.net/post/2022-04/rust-enum-layout/</link>
      <pubDate>Thu, 07 Apr 2022 14:38:20 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-enum-layout/</guid>
      <description>I learned a little bit about Rust Enum today, and before you start reading, you can guess what the output of the following Rust code is on a common 64 bit machine. 1 2 3 4 5 6 7 8 struct A (i64, i8); struct B (i64, i8, bool); fn main() { dbg!(std::mem::size_of::&amp;lt;A&amp;gt;()); dbg!(std::mem::size_of::&amp;lt;Option&amp;lt;A&amp;gt;&amp;gt;()); dbg!(std::mem::size_of::&amp;lt;B&amp;gt;()); dbg!(std::mem::size_of::&amp;lt;Option&amp;lt;B&amp;gt;&amp;gt;()); } In this Rust Playground you can see the result. Rust enum is essentially</description>
    </item>
    
    <item>
      <title>Rust Announces 2024 Roadmap, Will Lower Learning Barriers</title>
      <link>https://www.sobyte.net/post/2022-04/rust-lang-roadmap-2024/</link>
      <pubDate>Thu, 07 Apr 2022 09:40:45 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-lang-roadmap-2024/</guid>
      <description>As the Rust language continues to evolve, it&amp;rsquo;s natural to need plans for where the language will go next. So the Rust language design team (Rust Lang Team) recently published a roadmap for updates to the Rust language in 2024 on the official blog, providing A look at the future of Rust. It is important to note that it is still early in 2024, so the Rust roadmap may change over time on this basis.</description>
    </item>
    
    <item>
      <title>Lifetimes in Rust</title>
      <link>https://www.sobyte.net/post/2022-03/understanding-lifetimes-in-rust/</link>
      <pubDate>Mon, 21 Mar 2022 14:32:16 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/understanding-lifetimes-in-rust/</guid>
      <description>The things that make the lifetime annotation syntax awkward for me are
it&amp;rsquo;s not a real type because it can&amp;rsquo;t be instantiated like a real type, but it can be passed into the type parameter of a generic type like a real type, and it does have covariant inversion for real subtyping it can also be used as a type constraint like Trait, in addition to other lifetime annotations like &#39;a: &#39;b, it can also be constrained with normal types like T: &#39;a.</description>
    </item>
    
    <item>
      <title>Rust&#39;s confusing references and borrowings</title>
      <link>https://www.sobyte.net/post/2022-03/rust-shit-ref-borrow/</link>
      <pubDate>Wed, 09 Mar 2022 14:51:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-shit-ref-borrow/</guid>
      <description>There are three principles of Rust Ownership to keep in mind.
For each value, there is an owner. There can only be one owner for a value at a time. When the owner leaves the scope, the corresponding value is automatically dropped. hello is a string allocated on the heap, and the owner is s, which, when passed as an argument to the function takes_ownership, moves ownership to some_string . That is, the hello string will be dropped when the function returns, so main will report an error if it prints line 4 because it has been moved.</description>
    </item>
    
    <item>
      <title>Three principles of Rust ownership</title>
      <link>https://www.sobyte.net/post/2022-03/rust-ownership-three-princples/</link>
      <pubDate>Wed, 09 Mar 2022 14:40:15 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-ownership-three-princples/</guid>
      <description>The core concept of Rust is Ownership, a GC-enabled language that allows the runtime to sweep the heap at runtime and release unreferenced garbage objects, such as go. For languages like c/c++, you need to manage the allocation and release of memory yourself. Rust uses the concept of Ownership and appends various check rules to the compiler to implement memory management. Note that most of Rust&amp;rsquo;s work is done at</description>
    </item>
    
    <item>
      <title>Rust actually allows the variable shadow</title>
      <link>https://www.sobyte.net/post/2022-03/rust-allow-variable-shadow/</link>
      <pubDate>Wed, 09 Mar 2022 14:06:27 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-allow-variable-shadow/</guid>
      <description>Rust has a reputation for having a steep learning curve and a rigorous and secure language. But recently, while studying The Book, I discovered that it allows variable shadowing .
If the ordinary shadowing is not enough, the same lexical scope allows different types of variables, using the same variable name .
What else can I say but shock? Let&amp;rsquo;s look at the case of rust, go.
Common usage 1 2 3 4 5 6 7 8 9 fn main() { let x = 5; let x = x + 1; let x = x * 2; println!</description>
    </item>
    
    <item>
      <title>Rust Lifetime</title>
      <link>https://www.sobyte.net/post/2022-03/rust-lifetime/</link>
      <pubDate>Tue, 08 Mar 2022 15:34:14 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-lifetime/</guid>
      <description>First of all what are lifetimes? Lifetimes define the valid range of a reference, in other words lifetimes are a tool used by the compiler to compare the lifetime of the owner and the borrower, in order to avoid dangling pointer as much as possible.
1 2 3 4 5 6 7 8 9 10 11 12 13 fn main() { { let r; { let x = 5; r = &amp;amp;x; // ^^ borrowed value does not live long enough } // - `x` dropped here while still borrowed println!</description>
    </item>
    
    <item>
      <title>The Box Smart Pointer in Rust</title>
      <link>https://www.sobyte.net/post/2022-03/rust-box/</link>
      <pubDate>Tue, 08 Mar 2022 15:13:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-box/</guid>
      <description>Those familiar with c++ definitely know shared_ptr , unique_ptr , and Rust also has smart pointers Box , Rc , Arc , RefCell , etc. This article shares the underlying implementation of Box .
Box&amp;lt;T&amp;gt; allocates space on the heap, stores the T value, and returns the corresponding pointer. Also Box implements trait Deref dereference and Drop destructor to automatically free space when Box leaves the scope.
Getting Started Example Example from the rust book, without the print statement for demonstration purposes.</description>
    </item>
    
    <item>
      <title>Dissecting Smart Pointers Rc Weak and Arc</title>
      <link>https://www.sobyte.net/post/2022-03/smart-pointer-rc-weak-arc/</link>
      <pubDate>Tue, 08 Mar 2022 14:59:56 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/smart-pointer-rc-weak-arc/</guid>
      <description>We know that rust ownership has three principles: For each value, there is an owner. A value can only have one owner at a time. When the owner leaves the scope, the corresponding value is automatically dropped. But sometimes a value is shared by multiple variables. Also it cannot be solved by reference, because there is no way to determine which variable ended up last and there is no way</description>
    </item>
    
    <item>
      <title>Why Rust Needs Internal Variability</title>
      <link>https://www.sobyte.net/post/2022-03/rust-why-need-interior-mutability/</link>
      <pubDate>Tue, 08 Mar 2022 14:50:23 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-03/rust-why-need-interior-mutability/</guid>
      <description>This article refers to rust book ch15 and adds its own understanding, interested parties can first look at the official documentation.
Rust has two ways to achieve mutability
Inheritance variability: for example, if a struct is declared with let mut, then any field of the struct can be modified later. Internal mutability: use Cell RefCell to wrap a variable or field so that it can be modified even if the external variable is read-only It seems that inheritance mutability is enough, so why do we need the so-called interior mutability internal mutability?</description>
    </item>
    
    <item>
      <title>Musk: I&#39;m a Rust fan, but would choose C for performance</title>
      <link>https://www.sobyte.net/post/2022-02/elon-musk-is-a-fan-of-rust/</link>
      <pubDate>Thu, 24 Feb 2022 09:06:57 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/elon-musk-is-a-fan-of-rust/</guid>
      <description>Greg Brockman, CTO of OpenAI, a nonprofit artificial intelligence research company, today posted a tweet about &amp;ldquo;error messages&amp;rdquo; in programming, saying that one of the most underappreciated skills in programming is writing friendly error messages. Greg believes that a good error message should be self-explanatory and have three main points:
what the user did. what acceptable inputs are. how to fix the problem. Musk also commented on his opinion in this tweet, which he fully agrees with, and also said that compilers for programming languages could be better because not enough is currently being invested in them.</description>
    </item>
    
    <item>
      <title>Rust 2021 Survey: Interesting but Challenging</title>
      <link>https://www.sobyte.net/post/2022-02/rust-survey-2021/</link>
      <pubDate>Sun, 20 Feb 2022 10:28:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/rust-survey-2021/</guid>
      <description>The results of the Rust 2021 survey are now available. Ninety percent of respondents said they use Rust, 5% said they have used Rust in the past but no longer use it, and 4% said they have not used Rust at all.
The survey was conducted in December 2021 and is based on feedback from 9,354 respondents. Officials noted that the Rust community is growing, and the survey had the highest number of complete survey responses ever, beating last year&amp;rsquo;s total by about 1,500.</description>
    </item>
    
    <item>
      <title>Mutex&lt;Rc&gt; Why can&#39;t I pass it between threads?</title>
      <link>https://www.sobyte.net/post/2022-02/rust-mutex-send/</link>
      <pubDate>Fri, 18 Feb 2022 10:12:02 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/rust-mutex-send/</guid>
      <description>I was recently confused by a compiler error while writing a multi-threaded program in Rust.
Problem In short, I have a structure with an internal Rc value, as follows.
1 2 3 struct A { val: Rc&amp;lt;u32&amp;gt;, } Obviously, Rc is not thread-safe, so it is protected by a lock and passed between threads with Arc, so the following code is written.
1 2 3 4 5 6 7 8 9 10 11 fn main() { let mutex = Mutex::new(A { val: Rc::new(5) }); let target = Arc::new(mutex); let t = thread::spawn(move || { target.</description>
    </item>
    
    <item>
      <title>Implementing a thread pool using Rust</title>
      <link>https://www.sobyte.net/post/2022-02/rust-thread-pool/</link>
      <pubDate>Sat, 12 Feb 2022 11:06:43 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-02/rust-thread-pool/</guid>
      <description>How to implement a thread pool Thread pooling: a thread usage pattern. Too many threads introduce scheduling overhead, which in turn affects cache locality and overall performance. Instead, a thread pool maintains multiple threads waiting for a supervising manager to assign tasks that can be executed concurrently. This avoids the cost of creating and destroying threads while processing short time tasks. Thread pools not only ensure full utilization of the</description>
    </item>
    
    <item>
      <title>Implementing the FAT32 file system with Rust</title>
      <link>https://www.sobyte.net/post/2022-01/rust-fat32/</link>
      <pubDate>Sun, 09 Jan 2022 10:37:17 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/rust-fat32/</guid>
      <description>FAT file system knowledge overview A file is, in fact, data. Data is represented in the computer as 0/1, and the most basic unit is the bit. 8 bit = 1 Byte, 1024 Byte = 1 KB, 1024 KB = 1 MB, and so on. The content of a file is also a combination of several 01 strings. When reading/writing a file, we call the functions read()/write() in the kernel,</description>
    </item>
    
    <item>
      <title>Rust Ownership and Borrowing</title>
      <link>https://www.sobyte.net/post/2022-01/rust-ownership-and-borrowing/</link>
      <pubDate>Sat, 08 Jan 2022 13:36:25 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/rust-ownership-and-borrowing/</guid>
      <description>Study notes, benchmarking cpp to understand the concept of rust ownership and borrowing, and mentioning the more specific slice (DST) by the way Ownership Each value in rust has an owner variable and can only have one owner at the same time. When the value&amp;rsquo;s owner variable goes out of scope, the value&amp;rsquo;s memory is freed. The following code String has moved ownership from s1 to s2 and a Move</description>
    </item>
    
    <item>
      <title>Stuck problems caused by soft links</title>
      <link>https://www.sobyte.net/post/2021-12/symlink_metadata/</link>
      <pubDate>Sat, 25 Dec 2021 21:02:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/symlink_metadata/</guid>
      <description>fs::symlink_metadata Recently I wrote a program to recursively search for folder statistics and got stuck when measuring the size of a folder I used find -type l to search for soft links and found two links referenced recursively: a points to b&amp;rsquo;s folder while b points to a&amp;rsquo;s folder Looking at the source code, I realized that the underlying std::fs::metadata call stat() system call would follow the link I switched</description>
    </item>
    
    <item>
      <title>cargo tree invert</title>
      <link>https://www.sobyte.net/post/2021-12/cargo_tree_invert/</link>
      <pubDate>Sat, 25 Dec 2021 20:54:08 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/cargo_tree_invert/</guid>
      <description>Suppose there is a requirement that the Rust binary compiled in a fedora high version (2.34) glibc environment should be used in the customer&amp;rsquo;s centos7 glibc 2.17 environment, because the files compiled by the high version glibc will not work in the low version glibc environment
A possible solution is that the musl-gcc/musl-clang compiler makes the binary not strongly dependent on the glibc version, e.g. TabNine&amp;rsquo;s binary on Linux is musl&amp;rsquo;s</description>
    </item>
    
    <item>
      <title>tokio cancel dissemination of defects</title>
      <link>https://www.sobyte.net/post/2021-12/async_cancel_propagation/</link>
      <pubDate>Sat, 25 Dec 2021 20:44:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/async_cancel_propagation/</guid>
      <description>Recently, I encountered some bugs in my project: the receiver of tokio channel was dropped for some reason, resulting in a send error.
After debugging, I found that it was actually caused by hyper&amp;rsquo;s cancel propagation. The following changes to examples/web_api.rs in the hyper source code can be reproduced
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 diff --git a/Cargo.</description>
    </item>
    
    <item>
      <title>Rust 1.55.0 is officially released</title>
      <link>https://www.sobyte.net/post/2021-09/rust-1-55-0-released/</link>
      <pubDate>Sat, 11 Sep 2021 15:42:22 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-09/rust-1-55-0-released/</guid>
      <description>The Rust team has officially released a new version of Rust 1.55.0. If you have previously installed a previous version of Rust via rustup, you can upgrade to the latest version by running the following command.
1 rustup update stable Updates in the 1.55.0 stable release include Cargo repeats compiler error In past versions, when running cargo test, cargo check --all-targets, or similar commands to build the same Rust crate in multiple configurations, errors and warnings may be repeated because rustc runs in parallel and all display the same warnings.</description>
    </item>
    
    <item>
      <title>Manual for structopt library</title>
      <link>https://www.sobyte.net/post/2021-07/rust-lib-structopt/</link>
      <pubDate>Mon, 19 Jul 2021 10:50:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-07/rust-lib-structopt/</guid>
      <description>The standard library provides std::env::args() to get command line arguments, the first value is the name of the program, similar to the way arguments are obtained in other languages:
1 2 3 4 5 let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); let query = &amp;amp;args[1]; let filename = &amp;amp;args[2]; println!(&amp;#34;Searching for {}&amp;#34;, query); println!(&amp;#34;In file {}&amp;#34;, filename); But in the process of product development, we need more program parameters, and need certain rules and checks, this time we need to use some other libraries to parse these parameters, such as the structopt library.</description>
    </item>
    
  </channel>
</rss>
