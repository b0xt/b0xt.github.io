<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webassembly on SoByte</title>
    <link>https://www.sobyte.net/tags/webassembly/</link>
    <description>Recent content in Webassembly on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 25 Jun 2022 12:52:00 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/webassembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advantages of WebAssembly and use scenarios</title>
      <link>https://www.sobyte.net/post/2022-06/webassembly-introduction/</link>
      <pubDate>Sat, 25 Jun 2022 12:52:00 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/webassembly-introduction/</guid>
      <description>WebAssembly (Wasm) is a binary instruction format for stack-based virtual machines, a low-level assembly language designed to be very close to compiled machine code and very close to native performance. This article will introduce its advantages and usage scenarios, and experience the process of WebAssembly project development through code.
Simply put, Wasm is a compilation target that allows code written in about 30 languages to be compiled into .wasm files using WebAssembly-specific tools.</description>
    </item>
    
    <item>
      <title>Webassembly Basics</title>
      <link>https://www.sobyte.net/post/2022-05/webassembly/</link>
      <pubDate>Tue, 17 May 2022 18:52:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-05/webassembly/</guid>
      <description>1. What is webassembly? Historically, virtual machines used to load only JavaScript, and that&amp;rsquo;s good enough for us, because JavaScript is powerful enough to solve most of the problems people have on the web today. However, when trying to apply JavaScript to areas such as 3D games, virtual reality, augmented reality, computer vision, image/video editing, and a host of other areas that require native performance, we run into performance issues</description>
    </item>
    
    <item>
      <title>Plug-in mechanism via WebAssembly</title>
      <link>https://www.sobyte.net/post/2022-04/rust-plugin-with-webassembly/</link>
      <pubDate>Sat, 23 Apr 2022 14:27:09 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/rust-plugin-with-webassembly/</guid>
      <description>plug-in Two days ago in the study of coco plug-in system, we often say to interface-oriented development rather than implementation-oriented, plug-in this thing, like the middleware in the back-end framework, we follow the framework defined interface to implement middleware, which can also be considered a plug-in, we have many mechanisms to achieve &amp;ldquo;Pre-compiler plug-in&amp;rdquo;, but like coco to compile and release the binary program, what is the way to allow</description>
    </item>
    
    <item>
      <title>W3C released the first draft of WebAssembly 2.0</title>
      <link>https://www.sobyte.net/post/2022-04/wasm-2-0-public-drafts/</link>
      <pubDate>Wed, 20 Apr 2022 09:57:37 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-04/wasm-2-0-public-drafts/</guid>
      <description>The W3C today published the first Public Working Drafts (PWDs) of WebAssembly 2.0, consisting of 3 parts.
 WebAssembly Core Specification - Version 2.0: describes the 2.0 version of the WebAssembly core standard version 2.0 of the WebAssembly core standard, a secure, portable underlying code format designed to execute efficiently and provide a compact representation WebAssembly JavaScript Interface - Version 2.0: provides an explicit JavaScript API for interacting with WebAssembly WebAssembly Web API - Version 2.</description>
    </item>
    
  </channel>
</rss>
