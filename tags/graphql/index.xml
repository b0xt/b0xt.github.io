<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphql on SoByte</title>
    <link>https://www.sobyte.net/tags/graphql/</link>
    <description>Recent content in graphql on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Jun 2022 15:53:42 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/graphql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advantages of GraphQL over RESTful API</title>
      <link>https://www.sobyte.net/post/2022-06/graphql-vs-restfull/</link>
      <pubDate>Thu, 02 Jun 2022 15:53:42 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/graphql-vs-restfull/</guid>
      <description>As a web engineer, you can&amp;rsquo;t afford not to know what GraphQL is. It is an API Query syntax for front-end and back-end communication, which significantly improves the cooperation model between front-end and back-end, and this article will introduce to you why you should learn GraphQL, and organize the three major advantages of GraphQL, so that you can understand what is different from traditional RESTful API. Of course, we are not telling developers to abandon RESTful APIs, but to decide on different technology stacks depending on the project, for example, service to service calls are not suitable to use GraphQL, but to use the lighter RESTful API or gRPC.</description>
    </item>
    
    <item>
      <title>Using graphql in ts </title>
      <link>https://www.sobyte.net/post/2022-01/ts-graphql/</link>
      <pubDate>Sun, 16 Jan 2022 20:43:07 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-01/ts-graphql/</guid>
      <description>Scenarios graphql provides consistent api architecture metadata on the front and back ends, while speeding up the performance of web-backend interactions through request merging and on-demand fetching.
Use with ts Basic idea
scan all gql strings in the code get the graphql strings in the code and generate type definitions use these type definitions Steps to use Here is a demonstration using github api@v4
Get the back-end metadata
1 curl https://docs.</description>
    </item>
    
    <item>
      <title>GraphQL and REST: Two API Architectures</title>
      <link>https://www.sobyte.net/post/2021-12/graphql-rest/</link>
      <pubDate>Mon, 27 Dec 2021 19:31:12 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2021-12/graphql-rest/</guid>
      <description>GraphQL is both a query language for the API and a runtime for your data queries. GraphQL provides a complete set of easy-to-understand descriptions of the data in your API, allowing the client to get exactly the data it needs without any redundancy, and making it easier for the API to evolve over time, as well as for building powerful developer tools.
Over the last decade, REST has become the design standard for Web APIs, providing some great ideas such as stateless servers and structured access to resources.</description>
    </item>
    
  </channel>
</rss>
