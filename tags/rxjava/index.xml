<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rxjava on SoByte</title>
    <link>https://www.sobyte.net/tags/rxjava/</link>
    <description>Recent content in rxjava on SoByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Jun 2022 12:59:05 +0800</lastBuildDate><atom:link href="https://www.sobyte.net/tags/rxjava/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The principle of RxJava thread switching</title>
      <link>https://www.sobyte.net/post/2022-06/rxjava-scheduler/</link>
      <pubDate>Mon, 06 Jun 2022 12:59:05 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/rxjava-scheduler/</guid>
      <description>RxJava is designed on the basis of chained calls, and by setting different schedulers, you can flexibly switch between threads and execute the corresponding Task. Let&amp;rsquo;s take a look at how this switching pattern is implemented. Scheduler Scheduler is the abstract parent class of all RxJava schedulers, and subclasses need to override its createWorker() to return a Worker instance that accepts and executes a Task; it can also override its</description>
    </item>
    
    <item>
      <title>The principle of RxJava chain calls</title>
      <link>https://www.sobyte.net/post/2022-06/rxjava-chain/</link>
      <pubDate>Mon, 06 Jun 2022 12:53:49 +0800</pubDate>
      
      <guid>https://www.sobyte.net/post/2022-06/rxjava-chain/</guid>
      <description>RxJava uses a chain call design similar to the Stream API , providing filter, map, observeOn and other common operators . Unlike the Builder pattern, which does not require any order of method calls, RxJava&amp;rsquo;s operator calls need to maintain sequential relationships. A typical chain call scenario is as follows.
1 2 3 4 5 6  Observable .create(...) .filter(...) .map(...) .observeOn(...) .subscribe(...)   The chain call is triggered from subscribe() and we look at the corresponding source code.</description>
    </item>
    
  </channel>
</rss>
